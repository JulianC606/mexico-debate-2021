(async function () {
  if (process.env.NODE_ENV === 'production') return process.exit(1)
  const faker = require('faker')
  const mongoose = require('mongoose')
  const User = require('../models/UserModel')
  const Motion = require('../models/MotionModel')
  const Notification = require('../models/NotificationModel')
  const Transmission = require('../models/TransmissionModel')

  require('dotenv').config()

  try {
    await mongoose.connect(process.env.MONGO_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      useCreateIndex: true
    })

    console.log('db is connected')

    await User.deleteMany()
    await Motion.deleteMany()
    await Notification.deleteMany()
    await Transmission.deleteMany()

    const admin = new User({
      email: 'admin@example.com',
      password: 'changeme',
      firstName: faker.name.firstName(),
      lastName: faker.name.lastName(),
      status: 0,
      institution: faker.company.companyName(),
      role: 1,
      tabbyCatURL: faker.internet.url(),
      coachName: faker.name.firstName() + ' ' + faker.name.lastName(),
      curp: faker.lorem.word(10),
      coachEmail: faker.internet.email(),
      coachNumber: faker.phone.phoneNumber()
    })

    await admin.save()

    for (let i = 0; i < faker.datatype.number({ min: 20, max: 100 }); i++) {
      const user = new User({
        email: faker.internet.email(),
        password: 'changeme',
        firstName: faker.name.firstName(),
        lastName: faker.name.lastName(),
        status: 0,
        institution: faker.company.companyName(),
        tabbyCatURL: faker.internet.url(),
        coachName: faker.name.firstName() + ' ' + faker.name.lastName(),
        curp: faker.lorem.word(10),
        coachEmail: faker.internet.email(),
        coachNumber: faker.phone.phoneNumber()
      })
      await user.save()
      console.log('User: ', user.fullname, 'Created')
    }

    for (let i = 0; i < faker.datatype.number({ min: 20, max: 100 }); i++) {
      const motion = new Motion({
        title: faker.lorem.words(10),
        infoSlide: faker.lorem.paragraphs(faker.datatype.number({ min: 0, max: 4 })),
        round: i,
        category: faker.random.arrayElement(['mayor', 'menor'])
      })
      await motion.save()
      console.log('Motion:', motion.title, 'Created')
    }

    for (let i = 0; i < faker.datatype.number({ min: 20, max: 100 }); i++) {
      const notification = new Notification({
        message: faker.lorem.paragraph(),
        date: faker.date.future(2)
      })
      await notification.save()
      console.log('Notification: ', notification.date, 'Created')
    }

    for (let i = 0; i < faker.datatype.number({ min: 20, max: 100 }); i++) {
      const transmission = new Transmission({
        name: faker.lorem.words(4),
        url: faker.internet.url()
      })
      await transmission.save()
      console.log('Transmission: ', transmission.name, 'Created')
    }

    process.exit(0)
  } catch (e) {
    console.error(e)
    process.exit(1)
  }
})()
